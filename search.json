[{"path":"https://evandeilton.github.io/OptimalBinningWoE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 OptimalBinningWoE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). OptimalBinningWoE: Package (One Line, Title Case). R package version 0.1.1.9000, https://evandeilton.github.io/OptimalBinningWoE/.","code":"@Manual{,   title = {OptimalBinningWoE: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2024},   note = {R package version 0.1.1.9000},   url = {https://evandeilton.github.io/OptimalBinningWoE/}, }"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"optimalbinningwoe","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"OptimalBinningWoE package offers robust flexible implementation optimal binning Weight Evidence (WoE) calculation data analysis predictive modeling. package particularly useful data preparation credit scoring models can applied various statistical modeling contexts.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version OptimalBinningWoE GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"your_username/OptimalBinningWoE\")"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (One Line, Title Case)","text":"OptimalBinningWoE offers following main functionalities: Optimal binning categorical numerical variables Weight Evidence (WoE) calculation Automatic selection best binning method Data preprocessing, including handling missing values outliers","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"supported-algorithms","dir":"","previous_headings":"","what":"Supported Algorithms","title":"What the Package Does (One Line, Title Case)","text":"OptimalBinningWoE supports following binning algorithms: CAIM (Class-Attribute Interdependence Maximization): Applicable categorical numerical variables. ChiMerge: Applicable categorical numerical variables. MDLP (Minimum Description Length Principle): Applicable categorical numerical variables. MIP (Minimum Information Pure): Applicable categorical numerical variables. MOB (Monotone Optimal Binning): Applicable categorical numerical variables. IV (Information Value): Applicable categorical variables. PAVA (Pool Adjacent Violators Algorithm): Applicable numerical variables. Tree-based binning: Applicable numerical variables. algorithm strengths may perform differently depending nature data. automatic method selection option tests applicable algorithms chooses one produces highest Information Value.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"control-parameters","dir":"","previous_headings":"","what":"Control Parameters","title":"What the Package Does (One Line, Title Case)","text":"package offers various control parameters adjust behavior binning preprocessing: min_bads: Minimum proportion “bad” cases bin (default: 0.05) pvalue_threshold: P-value threshold statistical tests (default: 0.05) max_n_prebins: Maximum number pre-bins optimization (default: 20) monotonicity_direction: Direction monotonicity (“increase” “decrease”) (default: “increase”) lambda: Regularization parameter tree-based methods (default: 0.1) min_bin_size: Minimum proportion cases bin (default: 0.05) min_iv_gain: Minimum IV gain creating new split (default: 0.01) max_depth: Maximum depth tree-based methods (default: 10) num_miss_value: Value represent missing numeric values (default: -999.0) char_miss_value: Value represent missing categorical values (default: “N/”) outlier_method: Method outlier detection (“iqr”, “zscore”, “grubbs”) (default: “iqr”) outlier_process: Whether process outliers (default: FALSE) iqr_k: Factor IQR method (default: 1.5) zscore_threshold: Threshold Z-score method (default: 3) grubbs_alpha: Significance level Grubbs’ test (default: 0.05)","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage Examples","title":"What the Package Does (One Line, Title Case)","text":"","code":"library(OptimalBinningWoE) library(data.table) library(scorecard) library(janitor)  # Load the data data(\"germancredit\") da <- data.table::setDT(germancredit) %>%   data.table::copy() %>%    janitor::clean_names()  # Define the target variable da[, default := ifelse(creditability == \"bad\", 1, 0)] da$creditability <- NULL target <- \"default\"  # Copy data dt <- data.table::copy(da)  # Run OptimalBinningWoE with automatic method selection out <- OptimalBinningWoE(dt, target = \"default\", method = \"auto\")  # View results head(out$woe_feature) head(out$woe_woebins) head(out$prep_report)"},{"path":[]},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_1-binning-a-numeric-variable-with-a-specific-method","dir":"","previous_headings":"Detailed Examples","what":"1. Binning a numeric variable with a specific method","title":"What the Package Does (One Line, Title Case)","text":"","code":"# Copy data dt <- data.table::copy(da) # Using the MDLP method for the 'age_in_years' variable out <- OptimalBinningWoE(dt, target = \"default\", feature = \"age_in_years\", method = \"mdlp\") print(out$woe_woebins)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_2-binning-a-categorical-variable","dir":"","previous_headings":"Detailed Examples","what":"2. Binning a categorical variable","title":"What the Package Does (One Line, Title Case)","text":"","code":"# Copy data dt <- data.table::copy(da) # Using the ChiMerge method for the 'purpose' variable out <- OptimalBinningWoE(dt, target = \"default\", feature = \"purpose\", method = \"chimerge\") print(out$woe_woebins)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_3-handling-missing-values-in-preprocessing","dir":"","previous_headings":"Detailed Examples","what":"3. Handling missing values in preprocessing","title":"What the Package Does (One Line, Title Case)","text":"example, ’ll artificially add missing values:","code":"# Copy data dt <- data.table::copy(da)  # Add missing values set.seed(123) dt[sample(1:nrow(dt), 50), age_in_years := NA] dt[sample(1:nrow(dt), 30), credit_amount := NA]  # Run OptimalBinningWoE with preprocessing out <- OptimalBinningWoE(dt, target = \"default\",                           feature = c(\"age_in_years\", \"credit_amount\"),                           preprocess = TRUE)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_4-handling-outliers","dir":"","previous_headings":"Detailed Examples","what":"4. Handling outliers","title":"What the Package Does (One Line, Title Case)","text":"","code":"# Copy data dt <- data.table::copy(da)  # Add some outliers to the data dt[sample(1:nrow(dt), 10), credit_amount := rnorm(10, mean = 100000, sd = 10000)]  # Run OptimalBinningWoE with outlier treatment out <- OptimalBinningWoE(dt, target = \"default\",                           feature = \"credit_amount\", preprocess = TRUE,                          control = list(outlier_method = \"iqr\", outlier_process = TRUE))"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_5-comparison-of-different-methods","dir":"","previous_headings":"Detailed Examples","what":"5. Comparison of different methods","title":"What the Package Does (One Line, Title Case)","text":"","code":"methods <- c(\"caim\", \"chimerge\", \"mdlp\", \"mip\", \"mob\") out <- list()  for (method in methods) {   out[[method]] <- OptimalBinningWoE(dt, target = \"default\",                                       feature = \"duration_in_month\",                                       method = method) }  # Compare the number of bins and total IV for each method comparison <- data.frame(   Method = methods,   Num_Bins = sapply(out, function(x) nrow(x$woe_woebins)),   Total_IV = sapply(out, function(x) sum(x$woe_woebins$iv)) )"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_6-processing-multiple-variables","dir":"","previous_headings":"Detailed Examples","what":"6. Processing multiple variables","title":"What the Package Does (One Line, Title Case)","text":"","code":"# Select multiple features for processing selected_features <- c(\"age_in_years\", \"credit_amount\", \"duration_in_month\",                         \"present_residence_since\", \"number_of_existing_credits_at_this_bank\")  # Run OptimalBinningWoE for multiple features out <- OptimalBinningWoE(dt, target = \"default\", feature = selected_features, method = \"auto\")  # View summarized results summary_results <- out$woe_woebins summary_results <- summary_results[, c(\"total_iv\", \"nclass\") := list(sum(iv), .N), by = feature]"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"id_7-analysis-of-an-ordinal-variable","dir":"","previous_headings":"Detailed Examples","what":"7. Analysis of an ordinal variable","title":"What the Package Does (One Line, Title Case)","text":"examples demonstrate use OptimalBinningWoE German Credit dataset, including: Use real variables credit scoring dataset. Handling numeric, categorical, ordinal variables. Dealing missing values outliers (artificially introduced demonstration). Comparison different binning methods. Simultaneous processing multiple variables. Specific analysis ordinal variable. version examples uses German Credit dataset, real dataset widely used credit scoring studies. examples cover variety scenarios variable types present dataset, providing realistic relevant demonstration OptimalBinningWoE package usage.","code":"# Analyze the 'present_residence_since' variable out <- OptimalBinningWoE(dt, target = \"default\",                           feature = \"present_residence_since\", method = \"mob\")"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"final-considerations","dir":"","previous_headings":"","what":"Final Considerations","title":"What the Package Does (One Line, Title Case)","text":"OptimalBinningWoE package offers comprehensive solution binning WoE calculation, support various algorithms preprocessing options. using package, consider following points: Automatic method selection (method = \"auto\") can useful ’re unsure algorithm use, may computationally intensive large datasets. Data preprocessing, including handling missing values outliers, can significantly impact binning results. Adjust control parameters necessary specific dataset. Different binning methods can produce significantly different results. ’s good practice compare results several methods making final choice. large datasets, consider using representative sample determine optimal bins apply bins full dataset. package provides flexibility handle different types data modeling scenarios. Experiment different settings find best approach specific data. details available options interpretation results, please refer complete package documentation.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"What the Package Does (One Line, Title Case)","text":"Contributions OptimalBinningWoE welcome! Please refer CONTRIBUTING.md file guidelines contribute project.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"What the Package Does (One Line, Title Case)","text":"project licensed MIT License - see LICENSE.md file details.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningCategoricalMOB.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs optimal binning of a categorical variable for Weight of Evidence (WoE) and Information Value (IV) using Monotonic Optimal Binning (MOB) — OptimalBinningCategoricalMOB","title":"Performs optimal binning of a categorical variable for Weight of Evidence (WoE) and Information Value (IV) using Monotonic Optimal Binning (MOB) — OptimalBinningCategoricalMOB","text":"function processes categorical variable grouping rare categories, ordering event rate, generating bins maximize WoE monotonicity. also applies constraints ensure bins minimum number bad events (min_bads) calculates WoE IV generated bins.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningCategoricalMOB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs optimal binning of a categorical variable for Weight of Evidence (WoE) and Information Value (IV) using Monotonic Optimal Binning (MOB) — OptimalBinningCategoricalMOB","text":"","code":"OptimalBinningCategoricalMOB(   target,   feature,   min_bins = 2L,   max_bins = 7L,   cat_cutoff = 0.05,   min_bads = 0.05,   max_n_prebins = 20L )"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningCategoricalMOB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs optimal binning of a categorical variable for Weight of Evidence (WoE) and Information Value (IV) using Monotonic Optimal Binning (MOB) — OptimalBinningCategoricalMOB","text":"target Integer vector representing binary target variable, 1 indicates positive event (e.g., default) 0 indicates negative event (e.g., non-default). feature Character vector representing categorical variable binned. min_bins (Optional) Minimum number bins generate. Default 2. max_bins (Optional) Maximum number bins generate. Default 7. cat_cutoff (Optional) Frequency cutoff value, categories grouped \"\". Default 0.05. min_bads (Optional) Minimum proportion bad events bin must contain. Default 0.05. max_n_prebins (Optional) Maximum number pre-bins consider final binning. Default 20.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningCategoricalMOB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs optimal binning of a categorical variable for Weight of Evidence (WoE) and Information Value (IV) using Monotonic Optimal Binning (MOB) — OptimalBinningCategoricalMOB","text":"list following elements: feature_woe: Numeric vector WoE assigned instance processed categorical variable. bin: DataFrame generated bins, containing following fields: bin: Names categories grouped bin. woe: Weight Evidence (WoE) bin. iv: Information Value (IV) bin. count: Total number observations bin. count_pos: Count positive events bin. count_neg: Count negative events bin. woe: Numeric vector WoE bin. iv: Total Information Value (IV) calculated variable. pos: Vector count positive events bin. neg: Vector count negative events bin.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningDataPreprocessor.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","title":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","text":"function preprocesses given numeric categorical feature, handling missing values outliers based specified method. can process numeric categorical features supports outlier detection various methods, including IQR, Z-score, Grubbs' test. function also generates summary statistics preprocessing.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningDataPreprocessor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","text":"","code":"OptimalBinningDataPreprocessor(   target,   feature,   num_miss_value = -999,   char_miss_value = \"N/A\",   outlier_method = \"iqr\",   outlier_process = FALSE,   preprocess = as.character(c(\"both\")),   iqr_k = 1.5,   zscore_threshold = 3,   grubbs_alpha = 0.05 )"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningDataPreprocessor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","text":"target Numeric vector representing binary target variable, 1 indicates positive event (e.g., default) 0 indicates negative event (e.g., non-default). feature Numeric character vector representing feature binned. num_miss_value (Optional) Numeric value replace missing values numeric features. Default -999.0. char_miss_value (Optional) String value replace missing values categorical features. Default \"N/\". outlier_method (Optional) Method detect outliers. Choose \"iqr\", \"zscore\", \"grubbs\". Default \"iqr\". outlier_process (Optional) Boolean flag indicating whether outliers processed. Default FALSE. preprocess (Optional) Character vector specifying return: \"feature\", \"report\", \"\". Default \"\". iqr_k (Optional) multiplier interquartile range (IQR) using IQR method detect outliers. Default 1.5. zscore_threshold (Optional) threshold Z-score detect outliers. Default 3.0. grubbs_alpha (Optional) significance level Grubbs' test detect outliers. Default 0.05.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningDataPreprocessor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","text":"list containing following elements based preprocess parameter: preprocess: DataFrame containing original preprocessed feature values. report: DataFrame summarizing variable type, number missing values, number outliers (numeric features), statistics preprocessing.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningDataPreprocessor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","text":"function can handle numeric categorical features. numeric features, replaces missing values num_miss_value can apply outlier detection using different methods. categorical features, replaces missing values char_miss_value. function can return preprocessed feature /report summary statistics.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningDataPreprocessor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocesses a numeric or categorical variable for optimal binning with handling of missing values and outliers — OptimalBinningDataPreprocessor","text":"","code":"if (FALSE) { # \\dontrun{ target <- c(0, 1, 1, 0, 1) feature_numeric <- c(10, 20, NA, 40, 50) feature_categorical <- c(\"A\", \"B\", NA, \"B\", \"A\") result <- OptimalBinningDataPreprocessor(target, feature_numeric, outlier_process = TRUE) result <- OptimalBinningDataPreprocessor(target, feature_categorical) } # }"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Gains Table from the results of optimal binning — OptimalBinningGainsTable","title":"Generates a Gains Table from the results of optimal binning — OptimalBinningGainsTable","text":"function takes result optimal binning process generates detailed gains table. gains table includes metrics Weight Evidence (WoE), Information Value (IV), cumulative positive negative percentages, Kolmogorov-Smirnov (KS) statistic, odds ratio, lift, Gini contribution bin.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Gains Table from the results of optimal binning — OptimalBinningGainsTable","text":"","code":"OptimalBinningGainsTable(binning_result)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Gains Table from the results of optimal binning — OptimalBinningGainsTable","text":"binning_result list containing binning results, must include data frame following columns: \"bin\", \"count\", \"count_pos\", \"count_neg\", \"woe\".","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Gains Table from the results of optimal binning — OptimalBinningGainsTable","text":"data frame containing following columns bin: bin: bin labels. count: Total count observations bin. pos: Count positive events bin. neg: Count negative events bin. woe: Weight Evidence (WoE) bin. iv: Information Value (IV) contribution bin. total_iv: Total Information Value (IV) across bins. cum_pos: Cumulative count positive events current bin. cum_neg: Cumulative count negative events current bin. pos_rate: Rate positive events within bin. neg_rate: Rate negative events within bin. pos_perc: Percentage positive events relative total positive events. neg_perc: Percentage negative events relative total negative events. count_perc: Percentage total observations bin. cum_count_perc: Cumulative percentage observations current bin. cum_pos_perc: Cumulative percentage positive events current bin. cum_neg_perc: Cumulative percentage negative events current bin. cum_pos_perc_total: Cumulative percentage positive events relative total observations. cum_neg_perc_total: Cumulative percentage negative events relative total observations. odds_pos: Odds positive events bin. odds_ratio: Odds ratio positive events compared total population. lift: Lift bin, calculated ratio positive rate bin overall positive rate. ks: Kolmogorov-Smirnov statistic, measuring difference cumulative positive negative percentages. gini_contribution: Contribution Gini coefficient bin.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Gains Table from the results of optimal binning — OptimalBinningGainsTable","text":"","code":"if (FALSE) { # \\dontrun{ binning_result <- OptimalBinning(target, feature) gains_table <- OptimalBinningGainsTable(binning_result) } # }"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTableFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","title":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","text":"function takes numeric vector Weight Evidence (WoE) values corresponding binary target variable generate gains table. table includes key metrics counts, event rates, cumulative sums, Kolmogorov-Smirnov (KS) statistic, Information Value (IV), odds ratio, lift, Gini contribution unique WoE bin.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTableFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","text":"","code":"OptimalBinningGainsTableFeature(feature_woe, target)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTableFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","text":"feature_woe Numeric vector representing Weight Evidence (WoE) values observation. target Numeric vector representing binary target variable, 1 indicates positive event (e.g., default) 0 indicates negative event (e.g., non-default).","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTableFeature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","text":"data frame containing following columns unique WoE bin: bin: bin labels. count: Total count observations bin. pos: Count positive events bin. neg: Count negative events bin. woe: Weight Evidence (WoE) value bin. iv: Information Value (IV) contribution bin. total_iv: Total Information Value (IV) across bins. cum_pos: Cumulative count positive events current bin. cum_neg: Cumulative count negative events current bin. pos_rate: Rate positive events bin. neg_rate: Rate negative events bin. pos_perc: Percentage positive events relative total positive events. neg_perc: Percentage negative events relative total negative events. count_perc: Percentage total observations bin. cum_count_perc: Cumulative percentage observations current bin. cum_pos_perc: Cumulative percentage positive events current bin. cum_neg_perc: Cumulative percentage negative events current bin. cum_pos_perc_total: Cumulative percentage positive events relative total observations. cum_neg_perc_total: Cumulative percentage negative events relative total observations. odds_pos: Odds positive events bin. odds_ratio: Odds ratio positive events bin compared total population. lift: Lift bin, calculated ratio positive rate bin overall positive rate. ks: Kolmogorov-Smirnov statistic, measuring difference cumulative positive negative percentages. gini_contribution: Contribution Gini coefficient bin.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTableFeature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","text":"function assumes feature_woe target length. groups target values unique WoE values, computes various metrics group, returns comprehensive gains table.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningGainsTableFeature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Gains Table from the Weight of Evidence (WoE) and target feature data — OptimalBinningGainsTableFeature","text":"","code":"if (FALSE) { # \\dontrun{ feature_woe <- c(-0.5, 0.2, 0.2, -0.5, 0.3) target <- c(1, 0, 1, 0, 1) gains_table <- OptimalBinningGainsTableFeature(feature_woe, target) } # }"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningSelectAlgorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Optimal Binning Algorithm — OptimalBinningSelectAlgorithm","title":"Select Optimal Binning Algorithm — OptimalBinningSelectAlgorithm","text":"function selects appropriate binning algorithm based method variable type.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningSelectAlgorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Optimal Binning Algorithm — OptimalBinningSelectAlgorithm","text":"","code":"OptimalBinningSelectAlgorithm(feature, method, dt, control)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningSelectAlgorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Optimal Binning Algorithm — OptimalBinningSelectAlgorithm","text":"feature name feature bin. method binning method use. dt data.table containing dataset. control list additional control parameters.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningSelectAlgorithm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Optimal Binning Algorithm — OptimalBinningSelectAlgorithm","text":"list containing selected algorithm, parameters, method name.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningValidateInputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Inputs for Optimal Binning — OptimalBinningValidateInputs","title":"Validate Inputs for Optimal Binning — OptimalBinningValidateInputs","text":"function validates inputs OptimalBinningWoE function.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningValidateInputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Inputs for Optimal Binning — OptimalBinningValidateInputs","text":"","code":"OptimalBinningValidateInputs(   dt,   target,   feature,   method,   min_bins,   max_bins,   cat_cutoff,   bin_cutoff,   control )"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningValidateInputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Inputs for Optimal Binning — OptimalBinningValidateInputs","text":"dt data.table containing dataset. target name target variable. feature Optional. Name specific feature process. method binning method use. min_bins Minimum number bins. max_bins Maximum number bins. cat_cutoff Cutoff categorical variables. bin_cutoff Cutoff numeric variables. control list additional control parameters.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningValidateInputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Inputs for Optimal Binning — OptimalBinningValidateInputs","text":"return value, called side effects","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningWoE.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","title":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","text":"function performs optimal binning calculates Weight Evidence (WoE) multiple features. supports automatic method selection data preprocessing.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningWoE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","text":"","code":"OptimalBinningWoE(   dt,   target,   feature = NULL,   method = \"auto\",   preprocess = TRUE,   min_bins = 2,   max_bins = 4,   cat_cutoff = 0.05,   bin_cutoff = 0.05,   control = list() )"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningWoE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","text":"dt data.table containing dataset. target name target variable (must binary). feature Optional. Name specific feature process. NULL, features except target processed. method binning method use. Can \"auto\" specific method name. See Details information. preprocess Logical. Whether preprocess data binning. min_bins Minimum number bins. max_bins Maximum number bins. cat_cutoff Cutoff categorical variables. bin_cutoff Cutoff numeric variables. control list additional control parameters. See Details information.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningWoE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","text":"list containing: woe_feature: original dataset added WoE columns woe_woebins: Information bins created prep_report: Preprocessing report feature","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningWoE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","text":"Supported Algorithms: function supports following binning algorithms: CAIM (Class-Attribute Interdependence Maximization): Applicable categorical numeric variables. maximizes class-attribute interdependence find optimal bins. - Categorical: OptimalBinningCategoricalCAIM - Numeric: OptimalBinningNumericCAIM ChiMerge: Applicable categorical numeric variables. uses chi-square statistic iteratively merge adjacent intervals stopping criterion met. - Categorical: OptimalBinningCategoricalChiMerge - Numeric: OptimalBinningNumericChiMerge MDLP (Minimum Description Length Principle): Applicable categorical numeric variables. uses principle minimum description length find optimal splitting points. - Categorical: OptimalBinningCategoricalMDLP - Numeric: OptimalBinningNumericMDLP MIP (Minimum Information Pure): Applicable categorical numeric variables. aims minimize impurity information within bin. - Categorical: OptimalBinningCategoricalMIP - Numeric: OptimalBinningNumericMIP MOB (Monotone Optimal Binning): Applicable categorical numeric variables. ensures monotonicity binning process optimizing chosen metric. - Categorical: OptimalBinningCategoricalMOB - Numeric: OptimalBinningNumericMOB IV (Information Value): Applicable categorical variables. bins categories based information value respect target variable. - Categorical: OptimalBinningCategoricalIV PAVA (Pool Adjacent Violators Algorithm): Applicable numeric variables. ensures monotonicity binning process pooling adjacent bins violate monotonicity constraint. - Numeric: OptimalBinningNumericPAVA Tree-based binning: Applicable numeric variables. uses decision tree algorithms create bins, allowing flexible potentially non-linear binning. - Numeric: OptimalBinningNumericTree algorithm strengths may perform differently depending nature data. automatic method selection option tests applicable algorithms chooses one produces highest Information Value. specifying method, use short name (e.g., \"caim\", \"chimerge\") rather full algorithm name. Control Parameters: control list can include following parameters: min_bads: Minimum proportion \"bad\" cases bin (default: 0.05) pvalue_threshold: P-value threshold statistical tests (default: 0.05) max_n_prebins: Maximum number pre-bins optimization (default: 20) monotonicity_direction: Direction monotonicity (\"increase\" \"decrease\") (default: \"increase\") lambda: Regularization parameter tree-based methods (default: 0.1) min_bin_size: Minimum proportion cases bin (default: 0.05) min_iv_gain: Minimum IV gain creating new split (default: 0.01) max_depth: Maximum depth tree-based methods (default: 10) num_miss_value: Value represent missing numeric values (default: -999.0) char_miss_value: Value represent missing categorical values (default: \"N/\") outlier_method: Method outlier detection (\"iqr\", \"zscore\", \"grubbs\") (default: \"iqr\") outlier_process: Whether process outliers (default: FALSE) iqr_k: Factor IQR method (default: 1.5) zscore_threshold: Threshold Z-score method (default: 3) grubbs_alpha: Significance level Grubbs' test (default: 0.05)","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningWoE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal Binning and Weight of Evidence Calculation — OptimalBinningWoE","text":"","code":"if (FALSE) { # \\dontrun{ # Load necessary libraries library(data.table)  # Create a sample dataset dt <- data.table(   target = sample(0:1, 1000, replace = TRUE),   num_feat = rnorm(1000),   cat_feat = sample(letters[1:5], 1000, replace = TRUE) )  # Run OptimalBinningWoE with automatic method selection result <- OptimalBinningWoE(dt, target = \"target\", method = \"auto\")  # Check the results head(result$woe_feature) head(result$woe_woebins) head(result$prep_report) } # }"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningselectBestModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Best Binning Model — OptimalBinningselectBestModel","title":"Select Best Binning Model — OptimalBinningselectBestModel","text":"function tests multiple binning methods selects best one based Information Value (IV).","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningselectBestModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Best Binning Model — OptimalBinningselectBestModel","text":"","code":"OptimalBinningselectBestModel(dt, target, feature, control, min_bins, max_bins)"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningselectBestModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Best Binning Model — OptimalBinningselectBestModel","text":"dt data.table containing dataset. target name target variable. feature name feature bin. control list additional control parameters. min_bins Minimum number bins. max_bins Maximum number bins.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/OptimalBinningselectBestModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Best Binning Model — OptimalBinningselectBestModel","text":"binning result best method.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://evandeilton.github.io/OptimalBinningWoE/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
