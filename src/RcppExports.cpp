// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// OptimalBinningCategoricalMIP
Rcpp::List OptimalBinningCategoricalMIP(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, double cat_cutoff, int min_bins, int max_bins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCategoricalMIP(SEXP targetSEXP, SEXP featureSEXP, SEXP cat_cutoffSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< double >::type cat_cutoff(cat_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCategoricalMIP(target, feature, cat_cutoff, min_bins, max_bins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningCategoricalChiMerge
Rcpp::List OptimalBinningCategoricalChiMerge(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double pvalue_threshold, double cat_cutoff, double min_bads, int max_n_prebins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCategoricalChiMerge(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP pvalue_thresholdSEXP, SEXP cat_cutoffSEXP, SEXP min_badsSEXP, SEXP max_n_prebinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type pvalue_threshold(pvalue_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type cat_cutoff(cat_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCategoricalChiMerge(target, feature, min_bins, max_bins, pvalue_threshold, cat_cutoff, min_bads, max_n_prebins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningCategoricalMDLP
Rcpp::List OptimalBinningCategoricalMDLP(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double cat_cutoff, double min_bads);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCategoricalMDLP(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP cat_cutoffSEXP, SEXP min_badsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type cat_cutoff(cat_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCategoricalMDLP(target, feature, min_bins, max_bins, cat_cutoff, min_bads));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningCategoricalCAIM
Rcpp::List OptimalBinningCategoricalCAIM(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double cat_cutoff, double min_bads);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCategoricalCAIM(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP cat_cutoffSEXP, SEXP min_badsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type cat_cutoff(cat_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCategoricalCAIM(target, feature, min_bins, max_bins, cat_cutoff, min_bads));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningCategoricalIV
Rcpp::List OptimalBinningCategoricalIV(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double cat_cutoff, double min_bads);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCategoricalIV(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP cat_cutoffSEXP, SEXP min_badsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type cat_cutoff(cat_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCategoricalIV(target, feature, min_bins, max_bins, cat_cutoff, min_bads));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericMIP
Rcpp::List OptimalBinningNumericMIP(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericMIP(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericMIP(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericMOB
Rcpp::List OptimalBinningNumericMOB(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, double min_bads, int max_n_prebins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericMOB(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP min_badsSEXP, SEXP max_n_prebinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericMOB(target, feature, min_bins, max_bins, bin_cutoff, min_bads, max_n_prebins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericChiMerge
List OptimalBinningNumericChiMerge(IntegerVector target, NumericVector feature, int min_bins, int max_bins, double pvalue_threshold, double bin_cutoff, double min_bads, int max_n_prebins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericChiMerge(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP pvalue_thresholdSEXP, SEXP bin_cutoffSEXP, SEXP min_badsSEXP, SEXP max_n_prebinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type pvalue_threshold(pvalue_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericChiMerge(target, feature, min_bins, max_bins, pvalue_threshold, bin_cutoff, min_bads, max_n_prebins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericMDLP
List OptimalBinningNumericMDLP(IntegerVector target, NumericVector feature, int min_bins, int max_bins, double bin_cutoff, double min_bads, int max_n_prebins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericMDLP(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP min_badsSEXP, SEXP max_n_prebinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericMDLP(target, feature, min_bins, max_bins, bin_cutoff, min_bads, max_n_prebins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericCAIM
Rcpp::List OptimalBinningNumericCAIM(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, double min_bads, int max_n_prebins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericCAIM(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP min_badsSEXP, SEXP max_n_prebinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericCAIM(target, feature, min_bins, max_bins, bin_cutoff, min_bads, max_n_prebins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericPAVA
List OptimalBinningNumericPAVA(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int max_bins, double bin_cutoff, double min_bads, int max_n_prebins, std::string monotonicity_direction);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericPAVA(SEXP targetSEXP, SEXP featureSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP min_badsSEXP, SEXP max_n_prebinsSEXP, SEXP monotonicity_directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type min_bads(min_badsSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type monotonicity_direction(monotonicity_directionSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericPAVA(target, feature, max_bins, bin_cutoff, min_bads, max_n_prebins, monotonicity_direction));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericTree
List OptimalBinningNumericTree(IntegerVector target, NumericVector feature, int max_bins, double lambda, double min_bin_size, double min_iv_gain, int max_depth, std::string monotonicity_direction);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericTree(SEXP targetSEXP, SEXP featureSEXP, SEXP max_binsSEXP, SEXP lambdaSEXP, SEXP min_bin_sizeSEXP, SEXP min_iv_gainSEXP, SEXP max_depthSEXP, SEXP monotonicity_directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type min_bin_size(min_bin_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type min_iv_gain(min_iv_gainSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< std::string >::type monotonicity_direction(monotonicity_directionSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericTree(target, feature, max_bins, lambda, min_bin_size, min_iv_gain, max_depth, monotonicity_direction));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningCategoricalBreakList
Rcpp::List OptimalBinningCategoricalBreakList(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, Rcpp::List predefined_bins);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCategoricalBreakList(SEXP targetSEXP, SEXP featureSEXP, SEXP predefined_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type predefined_bins(predefined_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCategoricalBreakList(target, feature, predefined_bins));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningNumericalBreakList
Rcpp::List OptimalBinningNumericalBreakList(Rcpp::IntegerVector target, Rcpp::NumericVector feature, Rcpp::NumericVector break_points);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningNumericalBreakList(SEXP targetSEXP, SEXP featureSEXP, SEXP break_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type break_points(break_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningNumericalBreakList(target, feature, break_points));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningDataPreprocessor
List OptimalBinningDataPreprocessor(NumericVector target, SEXP feature, double num_miss_value, std::string char_miss_value, std::string outlier_method, bool outlier_process, CharacterVector preprocess, double iqr_k, double zscore_threshold, double grubbs_alpha);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningDataPreprocessor(SEXP targetSEXP, SEXP featureSEXP, SEXP num_miss_valueSEXP, SEXP char_miss_valueSEXP, SEXP outlier_methodSEXP, SEXP outlier_processSEXP, SEXP preprocessSEXP, SEXP iqr_kSEXP, SEXP zscore_thresholdSEXP, SEXP grubbs_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< double >::type num_miss_value(num_miss_valueSEXP);
    Rcpp::traits::input_parameter< std::string >::type char_miss_value(char_miss_valueSEXP);
    Rcpp::traits::input_parameter< std::string >::type outlier_method(outlier_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type outlier_process(outlier_processSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type preprocess(preprocessSEXP);
    Rcpp::traits::input_parameter< double >::type iqr_k(iqr_kSEXP);
    Rcpp::traits::input_parameter< double >::type zscore_threshold(zscore_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type grubbs_alpha(grubbs_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningDataPreprocessor(target, feature, num_miss_value, char_miss_value, outlier_method, outlier_process, preprocess, iqr_k, zscore_threshold, grubbs_alpha));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningGainsTable
DataFrame OptimalBinningGainsTable(List binning_result);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningGainsTable(SEXP binning_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type binning_result(binning_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningGainsTable(binning_result));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningGainsTableFeature
DataFrame OptimalBinningGainsTableFeature(NumericVector feature_woe, NumericVector target);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningGainsTableFeature(SEXP feature_woeSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type feature_woe(feature_woeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningGainsTableFeature(feature_woe, target));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OptimalBinningWoE_OptimalBinningCategoricalMIP", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCategoricalMIP, 5},
    {"_OptimalBinningWoE_OptimalBinningCategoricalChiMerge", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCategoricalChiMerge, 8},
    {"_OptimalBinningWoE_OptimalBinningCategoricalMDLP", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCategoricalMDLP, 6},
    {"_OptimalBinningWoE_OptimalBinningCategoricalCAIM", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCategoricalCAIM, 6},
    {"_OptimalBinningWoE_OptimalBinningCategoricalIV", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCategoricalIV, 6},
    {"_OptimalBinningWoE_OptimalBinningNumericMIP", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericMIP, 6},
    {"_OptimalBinningWoE_OptimalBinningNumericMOB", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericMOB, 7},
    {"_OptimalBinningWoE_OptimalBinningNumericChiMerge", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericChiMerge, 8},
    {"_OptimalBinningWoE_OptimalBinningNumericMDLP", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericMDLP, 7},
    {"_OptimalBinningWoE_OptimalBinningNumericCAIM", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericCAIM, 7},
    {"_OptimalBinningWoE_OptimalBinningNumericPAVA", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericPAVA, 7},
    {"_OptimalBinningWoE_OptimalBinningNumericTree", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericTree, 8},
    {"_OptimalBinningWoE_OptimalBinningCategoricalBreakList", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCategoricalBreakList, 3},
    {"_OptimalBinningWoE_OptimalBinningNumericalBreakList", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningNumericalBreakList, 3},
    {"_OptimalBinningWoE_OptimalBinningDataPreprocessor", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningDataPreprocessor, 10},
    {"_OptimalBinningWoE_OptimalBinningGainsTable", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningGainsTable, 1},
    {"_OptimalBinningWoE_OptimalBinningGainsTableFeature", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningGainsTableFeature, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_OptimalBinningWoE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
