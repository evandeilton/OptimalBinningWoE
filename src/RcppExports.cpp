// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// OptimalBinningApplyWoECat
DataFrame OptimalBinningApplyWoECat(const List& obresults, const CharacterVector& feature, const std::string& bin_separator);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningApplyWoECat(SEXP obresultsSEXP, SEXP featureSEXP, SEXP bin_separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type obresults(obresultsSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type bin_separator(bin_separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningApplyWoECat(obresults, feature, bin_separator));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningApplyWoENum
DataFrame OptimalBinningApplyWoENum(const List& obresults, const NumericVector& feature, bool include_upper_bound);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningApplyWoENum(SEXP obresultsSEXP, SEXP featureSEXP, SEXP include_upper_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type obresults(obresultsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< bool >::type include_upper_bound(include_upper_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningApplyWoENum(obresults, feature, include_upper_bound));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_cm
Rcpp::List optimal_binning_categorical_cm(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_cm(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_cm(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_dplc
Rcpp::List optimal_binning_categorical_dplc(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations, std::string bin_separator);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_dplc(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP, SEXP bin_separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_dplc(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations, bin_separator));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_fetb
Rcpp::List optimal_binning_categorical_fetb(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations, std::string bin_separator);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_fetb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP, SEXP bin_separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_fetb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations, bin_separator));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_gmb
Rcpp::List optimal_binning_categorical_gmb(Rcpp::IntegerVector target, Rcpp::StringVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_gmb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_gmb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_ivb
List optimal_binning_categorical_ivb(IntegerVector target, SEXP feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_ivb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_ivb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_mba
Rcpp::List optimal_binning_categorical_mba(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_mba(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_mba(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_milp
Rcpp::List optimal_binning_categorical_milp(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_milp(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_milp(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_mob
Rcpp::List optimal_binning_categorical_mob(Rcpp::IntegerVector target, Rcpp::StringVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_mob(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_mob(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_sab
Rcpp::List optimal_binning_categorical_sab(Rcpp::IntegerVector target, Rcpp::StringVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double initial_temperature, double cooling_rate, int max_iterations, double convergence_threshold);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_sab(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP initial_temperatureSEXP, SEXP cooling_rateSEXP, SEXP max_iterationsSEXP, SEXP convergence_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type initial_temperature(initial_temperatureSEXP);
    Rcpp::traits::input_parameter< double >::type cooling_rate(cooling_rateSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_sab(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, initial_temperature, cooling_rate, max_iterations, convergence_threshold));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_sblp
List optimal_binning_categorical_sblp(const IntegerVector& target, const CharacterVector& feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations, std::string bin_separator);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_sblp(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP, SEXP bin_separatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_sblp(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations, bin_separator));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_swb
Rcpp::List optimal_binning_categorical_swb(Rcpp::IntegerVector target, Rcpp::StringVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_swb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_swb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_categorical_udt
Rcpp::List optimal_binning_categorical_udt(Rcpp::IntegerVector target, Rcpp::CharacterVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, std::string bin_separator, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_categorical_udt(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP bin_separatorSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bin_separator(bin_separatorSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_categorical_udt(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, bin_separator, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningCheckDistinctsLength
Rcpp::IntegerVector OptimalBinningCheckDistinctsLength(SEXP x, Rcpp::IntegerVector target);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningCheckDistinctsLength(SEXP xSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningCheckDistinctsLength(x, target));
    return rcpp_result_gen;
END_RCPP
}
// binning_numerical_cutpoints
List binning_numerical_cutpoints(NumericVector feature, IntegerVector target, NumericVector cutpoints);
RcppExport SEXP _OptimalBinningWoE_binning_numerical_cutpoints(SEXP featureSEXP, SEXP targetSEXP, SEXP cutpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cutpoints(cutpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(binning_numerical_cutpoints(feature, target, cutpoints));
    return rcpp_result_gen;
END_RCPP
}
// binning_categorical_cutpoints
List binning_categorical_cutpoints(CharacterVector feature, IntegerVector target, CharacterVector cutpoints);
RcppExport SEXP _OptimalBinningWoE_binning_categorical_cutpoints(SEXP featureSEXP, SEXP targetSEXP, SEXP cutpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type cutpoints(cutpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(binning_categorical_cutpoints(feature, target, cutpoints));
    return rcpp_result_gen;
END_RCPP
}
// fit_logistic_regression
List fit_logistic_regression(SEXP X_r, const NumericVector& y_r, int maxit, double eps_f, double eps_g);
RcppExport SEXP _OptimalBinningWoE_fit_logistic_regression(SEXP X_rSEXP, SEXP y_rSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_r(X_rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_logistic_regression(X_r, y_r, maxit, eps_f, eps_g));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_bb
Rcpp::List optimal_binning_numerical_bb(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, bool is_monotonic, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_bb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP is_monotonicSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_monotonic(is_monotonicSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_bb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, is_monotonic, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_dplc
List optimal_binning_numerical_dplc(IntegerVector target, NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_dplc(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_dplc(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_ewb
Rcpp::List optimal_binning_numerical_ewb(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_ewb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_ewb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_fetb
List optimal_binning_numerical_fetb(NumericVector target, NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_fetb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_fetb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_ir
Rcpp::List optimal_binning_numerical_ir(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_ir(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_ir(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_kmb
List optimal_binning_numerical_kmb(IntegerVector target, NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_kmb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_kmb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_ldb
Rcpp::List optimal_binning_numerical_ldb(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_ldb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_ldb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_lpdb
Rcpp::List optimal_binning_numerical_lpdb(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_lpdb(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_lpdb(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_mblp
List optimal_binning_numerical_mblp(IntegerVector target, NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_mblp(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_mblp(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_mdlp
Rcpp::List optimal_binning_numerical_mdlp(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_mdlp(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_mdlp(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_mob
List optimal_binning_numerical_mob(IntegerVector target, NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_mob(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_mob(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_mrblp
List optimal_binning_numerical_mrblp(const IntegerVector& target, const NumericVector& feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_mrblp(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_mrblp(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_oslp
Rcpp::List optimal_binning_numerical_oslp(Rcpp::NumericVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_oslp(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_oslp(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_ubsd
Rcpp::List optimal_binning_numerical_ubsd(Rcpp::NumericVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_ubsd(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_ubsd(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// optimal_binning_numerical_udt
Rcpp::List optimal_binning_numerical_udt(Rcpp::IntegerVector target, Rcpp::NumericVector feature, int min_bins, int max_bins, double bin_cutoff, int max_n_prebins, double convergence_threshold, int max_iterations);
RcppExport SEXP _OptimalBinningWoE_optimal_binning_numerical_udt(SEXP targetSEXP, SEXP featureSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP bin_cutoffSEXP, SEXP max_n_prebinsSEXP, SEXP convergence_thresholdSEXP, SEXP max_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type bin_cutoff(bin_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type max_n_prebins(max_n_prebinsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_binning_numerical_udt(target, feature, min_bins, max_bins, bin_cutoff, max_n_prebins, convergence_threshold, max_iterations));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningDataPreprocessor
List OptimalBinningDataPreprocessor(NumericVector target, SEXP feature, double num_miss_value, std::string char_miss_value, std::string outlier_method, bool outlier_process, CharacterVector preprocess, double iqr_k, double zscore_threshold, double grubbs_alpha);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningDataPreprocessor(SEXP targetSEXP, SEXP featureSEXP, SEXP num_miss_valueSEXP, SEXP char_miss_valueSEXP, SEXP outlier_methodSEXP, SEXP outlier_processSEXP, SEXP preprocessSEXP, SEXP iqr_kSEXP, SEXP zscore_thresholdSEXP, SEXP grubbs_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< double >::type num_miss_value(num_miss_valueSEXP);
    Rcpp::traits::input_parameter< std::string >::type char_miss_value(char_miss_valueSEXP);
    Rcpp::traits::input_parameter< std::string >::type outlier_method(outlier_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type outlier_process(outlier_processSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type preprocess(preprocessSEXP);
    Rcpp::traits::input_parameter< double >::type iqr_k(iqr_kSEXP);
    Rcpp::traits::input_parameter< double >::type zscore_threshold(zscore_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type grubbs_alpha(grubbs_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningDataPreprocessor(target, feature, num_miss_value, char_miss_value, outlier_method, outlier_process, preprocess, iqr_k, zscore_threshold, grubbs_alpha));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningGainsTable
DataFrame OptimalBinningGainsTable(List binning_result);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningGainsTable(SEXP binning_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type binning_result(binning_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningGainsTable(binning_result));
    return rcpp_result_gen;
END_RCPP
}
// OptimalBinningGainsTableFeature
DataFrame OptimalBinningGainsTableFeature(CharacterVector binned_feature, NumericVector target);
RcppExport SEXP _OptimalBinningWoE_OptimalBinningGainsTableFeature(SEXP binned_featureSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type binned_feature(binned_featureSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(OptimalBinningGainsTableFeature(binned_feature, target));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OptimalBinningWoE_OptimalBinningApplyWoECat", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningApplyWoECat, 3},
    {"_OptimalBinningWoE_OptimalBinningApplyWoENum", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningApplyWoENum, 3},
    {"_OptimalBinningWoE_optimal_binning_categorical_cm", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_cm, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_dplc", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_dplc, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_fetb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_fetb, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_gmb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_gmb, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_ivb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_ivb, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_mba", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_mba, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_milp", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_milp, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_mob", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_mob, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_sab", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_sab, 11},
    {"_OptimalBinningWoE_optimal_binning_categorical_sblp", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_sblp, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_swb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_swb, 9},
    {"_OptimalBinningWoE_optimal_binning_categorical_udt", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_categorical_udt, 9},
    {"_OptimalBinningWoE_OptimalBinningCheckDistinctsLength", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningCheckDistinctsLength, 2},
    {"_OptimalBinningWoE_binning_numerical_cutpoints", (DL_FUNC) &_OptimalBinningWoE_binning_numerical_cutpoints, 3},
    {"_OptimalBinningWoE_binning_categorical_cutpoints", (DL_FUNC) &_OptimalBinningWoE_binning_categorical_cutpoints, 3},
    {"_OptimalBinningWoE_fit_logistic_regression", (DL_FUNC) &_OptimalBinningWoE_fit_logistic_regression, 5},
    {"_OptimalBinningWoE_optimal_binning_numerical_bb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_bb, 9},
    {"_OptimalBinningWoE_optimal_binning_numerical_dplc", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_dplc, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_ewb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_ewb, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_fetb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_fetb, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_ir", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_ir, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_kmb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_kmb, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_ldb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_ldb, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_lpdb", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_lpdb, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_mblp", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_mblp, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_mdlp", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_mdlp, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_mob", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_mob, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_mrblp", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_mrblp, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_oslp", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_oslp, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_ubsd", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_ubsd, 8},
    {"_OptimalBinningWoE_optimal_binning_numerical_udt", (DL_FUNC) &_OptimalBinningWoE_optimal_binning_numerical_udt, 8},
    {"_OptimalBinningWoE_OptimalBinningDataPreprocessor", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningDataPreprocessor, 10},
    {"_OptimalBinningWoE_OptimalBinningGainsTable", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningGainsTable, 1},
    {"_OptimalBinningWoE_OptimalBinningGainsTableFeature", (DL_FUNC) &_OptimalBinningWoE_OptimalBinningGainsTableFeature, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_OptimalBinningWoE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
