% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_categorical_mob}
\alias{optimal_binning_categorical_mob}
\title{Optimal Binning for Categorical Variables using Monotonic Optimal Binning (MOB)}
\usage{
optimal_binning_categorical_mob(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L,
  bin_separator = "\%;\%",
  convergence_threshold = 1e-06,
  max_iterations = 1000L
)
}
\arguments{
\item{target}{An integer vector of binary target values (0 or 1).}

\item{feature}{A character vector of categorical feature values.}

\item{min_bins}{Minimum number of bins (default: 3).}

\item{max_bins}{Maximum number of bins (default: 5).}

\item{bin_cutoff}{Minimum proportion of observations in a bin (default: 0.05).}

\item{max_n_prebins}{Maximum number of pre-bins (default: 20).}

\item{bin_separator}{Separator used for merging category names (default: "\%;\%").}

\item{convergence_threshold}{Convergence threshold for the algorithm (default: 1e-6).}

\item{max_iterations}{Maximum number of iterations for the algorithm (default: 1000).}
}
\value{
A list containing the following elements:
\itemize{
\item bin: A character vector of bin names (merged categories)
\item woe: A numeric vector of Weight of Evidence (WoE) values for each bin
\item iv: A numeric vector of Information Value (IV) for each bin
\item count: An integer vector of total counts for each bin
\item count_pos: An integer vector of positive target counts for each bin
\item count_neg: An integer vector of negative target counts for each bin
\item converged: A logical value indicating whether the algorithm converged
\item iterations: An integer value indicating the number of iterations run
}
}
\description{
This function performs optimal binning for categorical variables using the Monotonic Optimal Binning (MOB) approach.
}
\details{
This algorithm performs optimal binning for categorical variables using the Monotonic Optimal Binning (MOB) approach.
The process aims to maximize the Information Value (IV) while maintaining monotonicity in the Weight of Evidence (WoE) across bins.

The algorithm works as follows:

\enumerate{
\item \strong{Category Statistics Calculation}:
For each category, calculate the total count, count of positive instances, and count of negative instances.

\item \strong{Initial Binning}:
Categories are sorted based on their initial Weight of Evidence (WoE).

\item \strong{Monotonicity Enforcement}:
The algorithm enforces decreasing monotonicity of WoE across bins.
If this condition is violated, adjacent bins are merged.

\item \strong{Bin Limiting}:
The number of bins is limited to the specified \code{max_bins}.
When merging is necessary, the algorithm chooses the two adjacent bins with the smallest WoE difference.

\item \strong{Information Value (IV) Computation}:
For each bin, the IV is calculated, and the total IV is computed.
}

The MOB approach ensures that the resulting bins have monotonic WoE values, which is often desirable in credit scoring and risk modeling applications.
}
\examples{
\dontrun{
# Create sample data
set.seed(123)
target <- sample(0:1, 1000, replace = TRUE)
feature <- sample(LETTERS[1:5], 1000, replace = TRUE)

# Run optimal binning
result <- optimal_binning_categorical_mob(target, feature)

# View results
print(result)
}

}
\references{
\itemize{
\item Belotti, T., Crook, J. (2009). Credit Scoring with Macroeconomic Variables Using Survival Analysis.
\emph{Journal of the Operational Research Society}, 60(12), 1699-1707.
\item Mironchyk, P., Tchistiakov, V. (2017). Monotone optimal binning algorithm for credit risk modeling.
\emph{arXiv preprint} arXiv:1711.05095.
}
}
