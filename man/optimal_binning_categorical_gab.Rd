% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_categorical_gab}
\alias{optimal_binning_categorical_gab}
\title{Categorical Optimal Binning with Genetic Algorithm}
\usage{
optimal_binning_categorical_gab(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L,
  population_size = 100L,
  num_generations = 100L,
  mutation_rate = 0.1,
  crossover_rate = 0.8,
  time_limit_seconds = 300L
)
}
\arguments{
\item{target}{Integer vector of binary target values (0 or 1).}

\item{feature}{Character vector of categorical feature values.}

\item{min_bins}{Minimum number of bins (default: 3).}

\item{max_bins}{Maximum number of bins (default: 5).}

\item{bin_cutoff}{Minimum frequency for a separate bin (default: 0.05).}

\item{max_n_prebins}{Maximum number of pre-bins before merging (default: 20).}

\item{population_size}{Size of the genetic algorithm population (default: 100).}

\item{num_generations}{Number of generations for the genetic algorithm (default: 100).}

\item{mutation_rate}{Probability of mutation for each bin (default: 0.1).}

\item{crossover_rate}{Probability of crossover between parents (default: 0.8).}

\item{time_limit_seconds}{Maximum execution time in seconds (default: 300).}
}
\value{
A list with two elements:
\itemize{
\item woefeature: Numeric vector of WoE values for each input feature value.
\item woebin: Data frame with binning results (bin names, WoE, IV, counts).
}
}
\description{
Implements optimal binning for categorical variables using a Genetic Algorithm approach,
calculating Weight of Evidence (WoE) and Information Value (IV).
}
\details{
The algorithm uses a genetic algorithm approach to find an optimal binning solution.
It evolves a population of binning solutions over multiple generations, using
selection, crossover, and mutation operations.

Weight of Evidence (WoE) for each bin is calculated as:

\deqn{WoE = \ln\left(\frac{P(X|Y=1)}{P(X|Y=0)}\right)}

Information Value (IV) for each bin is calculated as:

\deqn{IV = (P(X|Y=1) - P(X|Y=0)) \times WoE}

The fitness of each individual (binning solution) is the sum of IVs across all bins.
The algorithm aims to maximize this fitness while respecting constraints on the
number of bins and ensuring monotonicity of WoE values across bins.

The genetic algorithm includes the following key steps:
\enumerate{
\item Initialize population with random binning solutions.
\item Evaluate fitness of each individual.
\item Select parents based on fitness (using roulette wheel selection).
\item Create offspring through crossover and mutation.
\item Ensure offspring respect constraints (number of bins, monotonicity).
\item Replace population with offspring.
\item Repeat steps 2-6 for the specified number of generations or until time limit is reached.
}
}
\examples{
\dontrun{
# Sample data
target <- c(1, 0, 1, 1, 0, 1, 0, 0, 1, 1)
feature <- c("A", "B", "A", "C", "B", "D", "C", "A", "D", "B")

# Run optimal binning
result <- optimal_binning_categorical_gab(target, feature, min_bins = 2, max_bins = 4)

# View results
print(result$woebin)
print(result$woefeature)
}

}
\references{
\itemize{
\item Holland, J. H. (1992). Adaptation in natural and artificial systems: an introductory analysis with applications to biology, control, and artificial intelligence. MIT press.
\item Whitley, D. (1994). A genetic algorithm tutorial. Statistics and computing, 4(2), 65-85.
}
}
\author{
Lopes, J. E.
}
