% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_categorical_fetb}
\alias{optimal_binning_categorical_fetb}
\title{Binning Ótimo para Variáveis Categóricas utilizando Fisher's Exact Test (Versão Fortificada)}
\usage{
optimal_binning_categorical_fetb(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L,
  convergence_threshold = 1e-06,
  max_iterations = 1000L,
  bin_separator = "\%;\%"
)
}
\arguments{
\item{target}{Vetor inteiro binário (0 ou 1) do target.}

\item{feature}{Vetor de strings categóricas da variável explicativa.}

\item{min_bins}{Número mínimo de bins (default: 3).}

\item{max_bins}{Número máximo de bins (default: 5).}

\item{bin_cutoff}{Frequência mínima para manter um bin separado (default: 0.05).}

\item{max_n_prebins}{Máximo de pré-bins antes da mesclagem (default: 20).}

\item{convergence_threshold}{Limite de convergência (default: 1e-6).}

\item{max_iterations}{Máximo de iterações (default: 1000).}

\item{bin_separator}{Separador para nomes de categorias (default: "\%;\%").}
}
\value{
Uma lista contendo:
\itemize{
\item bin: Nomes dos bins.
\item woe: Vetor numérico de WoE por bin.
\item iv: Vetor numérico de IV por bin.
\item count: Contagem total por bin.
\item count_pos: Contagem de positivos por bin.
\item count_neg: Contagem de negativos por bin.
\item converged: Booleano indicando se houve convergência.
\item iterations: Número de iterações executadas.
}
}
\description{
Este código implementa um binning ótimo para variáveis categóricas utilizando o teste exato de Fisher,
calculando WoE (Weight of Evidence) e IV (Information Value). Além disso, foram adicionadas melhorias
sugeridas por um especialista para garantir robustez, evitar problemas numéricos e tornar o código
mais à prova de falhas.

Melhorias sugeridas:
\enumerate{
\item Verificação adicional de condições limite, garantindo que o algoritmo não trave em cenários extremos.
\item Cálculo mais robusto dos log-factoriais, evitando overflow e garantindo estabilidade numérica.
\item Checagem de valores nulos e tratamento de distâncias zero no cálculo de WoE e IV.
\item Manipulação cuidadosa de merges para evitar bins vazios ou degenerados.
\item Comentários detalhados, passo a passo, para facilitar manutenção.
\item Pré-alocação e uso criterioso de estruturas para evitar realocações excessivas.
\item Tratamento explícito para casos de min_bins ou max_bins próximos ao número de categorias.
\item Funções auxiliares inline para operações repetitivas, reduzindo risco de erros.
\item Conservadorismo nos testes estatísticos: uso de EPSILON para evitar log de zero.
}
}
\details{
O algoritmo utiliza o teste exato de Fisher para mesclar bins adjacentes, buscando maximizar a separação
estatística. Ao final, assegura monotonicidade e respeita restrições de número mínimo e máximo de bins.
Foram implementados cuidados extras para evitar overflows, problemas de ponto flutuante e falta de convergência.
}
\examples{
\dontrun{
set.seed(123)
target <- sample(0:1, 1000, replace = TRUE)
feature <- sample(LETTERS[1:5], 1000, replace = TRUE)
result <- optimal_binning_categorical_fetb(target, feature, min_bins = 2, 
max_bins = 4, bin_separator = "|")
print(result)
}

}
