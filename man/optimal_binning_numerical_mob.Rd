% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_numerical_mob}
\alias{optimal_binning_numerical_mob}
\title{Perform Optimal Binning for Numerical Features using Monotonic Optimal Binning (MOB)}
\usage{
optimal_binning_numerical_mob(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L,
  convergence_threshold = 1e-06,
  max_iterations = 1000L
)
}
\arguments{
\item{target}{An integer vector of binary target values (0 or 1)}

\item{feature}{A numeric vector of feature values to be binned}

\item{min_bins}{Minimum number of bins to create (default: 3)}

\item{max_bins}{Maximum number of bins to create (default: 5)}

\item{bin_cutoff}{Minimum frequency of observations in a bin (default: 0.05)}

\item{max_n_prebins}{Maximum number of prebins to create initially (default: 20)}

\item{convergence_threshold}{Threshold for convergence in the iterative process (default: 1e-6)}

\item{max_iterations}{Maximum number of iterations for the binning process (default: 1000)}
}
\value{
A list containing the following elements:
\item{bin}{A character vector of bin labels}
\item{woe}{A numeric vector of Weight of Evidence values for each bin}
\item{iv}{A numeric vector of Information Value for each bin}
\item{count}{An integer vector of total count of observations in each bin}
\item{count_pos}{An integer vector of count of positive class observations in each bin}
\item{count_neg}{An integer vector of count of negative class observations in each bin}
\item{cutpoints}{A numeric vector of cutpoints used to create the bins}
\item{converged}{A logical value indicating whether the algorithm converged}
\item{iterations}{An integer value indicating the number of iterations run}
}
\description{
This function implements the Monotonic Optimal Binning algorithm for numerical features.
It creates optimal bins while maintaining monotonicity in the Weight of Evidence (WoE) values.
}
\details{
The algorithm starts by creating initial bins and then iteratively merges them
to achieve optimal binning while maintaining monotonicity in the WoE values.
It respects the minimum and maximum number of bins specified.
}
\examples{
\dontrun{
set.seed(42)
feature <- rnorm(1000)
target <- rbinom(1000, 1, 0.5)
result <- optimal_binning_numerical_mob(target, feature)
print(result)
}

}
