% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_categorical_dplc}
\alias{optimal_binning_categorical_dplc}
\title{Optimal Binning for Categorical Variables using Dynamic Programming with Linear Constraints}
\usage{
optimal_binning_categorical_dplc(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L
)
}
\arguments{
\item{target}{An integer vector of binary target values (0 or 1).}

\item{feature}{A character vector of categorical feature values.}

\item{min_bins}{Minimum number of bins (default: 3).}

\item{max_bins}{Maximum number of bins (default: 5).}

\item{bin_cutoff}{Minimum proportion of total observations for a bin (default: 0.05).}

\item{max_n_prebins}{Maximum number of pre-bins before merging (default: 20).}
}
\value{
A list containing two elements:
\itemize{
\item woefeature: A numeric vector of Weight of Evidence (WOE) values for each observation.
\item woebin: A data frame containing binning information, including bin names, WOE, IV, and counts.
}
}
\description{
This function performs optimal binning for categorical variables using a dynamic programming approach with linear constraints. It aims to find the optimal grouping of categories that maximizes the Information Value (IV) while respecting user-defined constraints on the number of bins.
}
\details{
The algorithm uses dynamic programming to find the optimal binning solution that maximizes the total Information Value (IV) while respecting the constraints on the number of bins. It follows these main steps:

\enumerate{
\item Preprocess the data by counting occurrences and merging rare categories.
\item Sort categories based on their event rates.
\item Use dynamic programming to find the optimal binning solution.
\item Backtrack to determine the final bin edges.
\item Calculate WOE and IV for each bin.
}

The dynamic programming approach uses a recurrence relation to find the maximum total IV achievable for a given number of categories and bins.

The Weight of Evidence (WOE) for each bin is calculated as:

\deqn{WOE = \ln\left(\frac{\text{Distribution of Good}}{\text{Distribution of Bad}}\right)}

And the Information Value (IV) for each bin is:

\deqn{IV = (\text{Distribution of Good} - \text{Distribution of Bad}) \times WOE}

The algorithm aims to find the binning solution that maximizes the total IV while respecting the constraints on the number of bins.
}
\examples{
\dontrun{
# Create sample data
set.seed(123)
n <- 1000
target <- sample(0:1, n, replace = TRUE)
feature <- sample(c("A", "B", "C", "D", "E"), n, replace = TRUE)

# Perform optimal binning
result <- optimal_binning_categorical_dplc(target, feature, min_bins = 2, max_bins = 4)

# View results
print(result$woebin)
hist(result$woefeature)
}

}
\references{
\itemize{
\item Belotti, P., Bonami, P., Fischetti, M., Lodi, A., Monaci, M., Nogales-GÃ³mez, A., & Salvagnin, D. (2016). On handling indicator constraints in mixed integer programming. Computational Optimization and Applications, 65(3), 545-566.
\item Mironchyk, P., & Tchistiakov, V. (2017). Monotone optimal binning algorithm for credit risk modeling. SSRN Electronic Journal.
}
}
\author{
Lopes, J. E.
}
