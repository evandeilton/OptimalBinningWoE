% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{OptimalBinningNumericMIP}
\alias{OptimalBinningNumericMIP}
\title{Performs optimal binning of a numeric variable for Weight of Evidence (WoE) and Information Value (IV) using a Mixed-Integer Programming (MIP) approach}
\usage{
OptimalBinningNumericMIP(
  target,
  feature,
  min_bins = 2L,
  max_bins = 7L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L
)
}
\arguments{
\item{target}{Integer vector representing the binary target variable, where 1 indicates a positive event (e.g., default) and 0 indicates a negative event (e.g., non-default).}

\item{feature}{Numeric vector representing the numeric variable to be binned.}

\item{min_bins}{(Optional) Minimum number of bins to generate. Default is 2.}

\item{max_bins}{(Optional) Maximum number of bins to generate. Default is 7.}

\item{bin_cutoff}{(Optional) Cutoff value that determines the frequency of values to define pre-bins. Default is 0.05.}

\item{max_n_prebins}{(Optional) Maximum number of pre-bins to consider before final binning. Default is 20.}
}
\value{
A list with the following elements:
\itemize{
\item \code{feature_woe}: Numeric vector with the WoE assigned to each instance of the processed numeric variable.
\item \code{bin}: DataFrame containing the generated bins, with the following fields:
\itemize{
\item \code{bin}: String representing the range of values for each bin.
\item \code{woe}: Weight of Evidence (WoE) for each bin.
\item \code{iv}: Information Value (IV) for each bin.
\item \code{count}: Total number of observations in each bin.
\item \code{count_pos}: Count of positive events in each bin.
\item \code{count_neg}: Count of negative events in each bin.
}
\item \code{woe}: Numeric vector with the WoE for each bin.
\item \code{iv}: Total Information Value (IV) calculated for the variable.
\item \code{pos}: Vector with the count of positive events in each bin.
\item \code{neg}: Vector with the count of negative events in each bin.
}
}
\description{
This function processes a numeric variable, removes missing values, and creates pre-bins based on unique values. It iteratively splits bins to maximize Information Value (IV) while ensuring monotonicity. The function also calculates WoE and IV for the generated bins.
}
