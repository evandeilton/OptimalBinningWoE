% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_numerical_sab}
\alias{optimal_binning_numerical_sab}
\title{Optimal Binning for Numerical Variables using Simulated Annealing Binning (SAB)}
\usage{
optimal_binning_numerical_sab(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L,
  monotonicity = "none"
)
}
\arguments{
\item{target}{An integer vector of binary target values (0 or 1).}

\item{feature}{A numeric vector of feature values.}

\item{min_bins}{Minimum number of bins (default: 3).}

\item{max_bins}{Maximum number of bins (default: 5).}

\item{bin_cutoff}{Minimum proportion of total observations for a bin to avoid being merged (default: 0.05).}

\item{max_n_prebins}{Maximum number of pre-bins before the optimization process (default: 20).}

\item{monotonicity}{Direction of monotonicity constraint: "none" (default), "increasing", or "decreasing".}
}
\value{
A list containing two elements:
\item{woefeature}{A numeric vector of Weight of Evidence (WoE) values for each observation.}
\item{woebin}{A data frame with the following columns:
\itemize{
\item bin: Character vector of bin ranges.
\item woe: Numeric vector of WoE values for each bin.
\item iv: Numeric vector of Information Value (IV) for each bin.
\item count: Integer vector of total observations in each bin.
\item count_pos: Integer vector of positive target observations in each bin.
\item count_neg: Integer vector of negative target observations in each bin.
}
}
}
\description{
This function performs optimal binning for numerical variables using a Simulated
Annealing Binning (SAB) approach. It creates optimal bins for a numerical feature
based on its relationship with a binary target variable, maximizing the predictive
power while respecting user-defined constraints.
}
\details{
The Simulated Annealing Binning (SAB) algorithm for numerical variables works as follows:
\enumerate{
\item Perform initial pre-binning based on quantiles.
\item Use simulated annealing to optimize the bin cut points:
\itemize{
\item Generate neighbor solutions by adding, removing, or modifying cut points.
\item Accept or reject new solutions based on the change in Information Value (IV) and the current temperature.
\item Gradually decrease the temperature to converge on an optimal solution.
}
\item Merge low-frequency bins to meet the bin_cutoff requirement.
\item Calculate final Weight of Evidence (WoE) and Information Value (IV) for each bin.
}

The algorithm aims to create bins that maximize the predictive power of the numerical
variable while adhering to the specified constraints. Simulated annealing allows the
algorithm to escape local optima and potentially find a globally optimal binning solution.

Weight of Evidence (WoE) is calculated as:
\deqn{WoE = \ln(\frac{\text{Positive Rate}}{\text{Negative Rate}})}

Information Value (IV) is calculated as:
\deqn{IV = (\text{Positive Rate} - \text{Negative Rate}) \times WoE}

This implementation uses OpenMP for parallel processing when available, which can
significantly speed up the computation for large datasets.
}
\examples{
\dontrun{
# Create sample data
set.seed(123)
n <- 1000
target <- sample(0:1, n, replace = TRUE)
feature <- rnorm(n)

# Run optimal binning
result <- optimal_binning_numerical_sab(target, feature, min_bins = 2, max_bins = 4)

# Print results
print(result$woebin)

# Plot WoE values
plot(result$woebin$woe, type = "s", xaxt = "n", xlab = "Bins", ylab = "WoE",
     main = "Weight of Evidence by Bin")
axis(1, at = 1:nrow(result$woebin), labels = result$woebin$bin, las = 2)
}

}
\references{
\itemize{
\item Kirkpatrick, S., Gelatt, C. D., & Vecchi, M. P. (1983). Optimization by simulated annealing. Science, 220(4598), 671-680.
\item Mironchyk, P., & Tchistiakov, V. (2017). Monotone optimal binning algorithm for credit risk modeling. SSRN Electronic Journal. DOI: 10.2139/ssrn.2978774
}
}
