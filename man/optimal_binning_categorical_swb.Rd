% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{optimal_binning_categorical_swb}
\alias{optimal_binning_categorical_swb}
\title{Optimal Binning for Categorical Variables using Sliding Window Binning (SWB)}
\usage{
optimal_binning_categorical_swb(
  target,
  feature,
  min_bins = 3L,
  max_bins = 5L,
  bin_cutoff = 0.05,
  max_n_prebins = 20L,
  bin_separator = "\%;\%",
  convergence_threshold = 1e-06,
  max_iterations = 1000L
)
}
\arguments{
\item{target}{Integer binary vector (0 or 1) representing the response variable.}

\item{feature}{Character vector with the categories of the explanatory variable.}

\item{min_bins}{Minimum number of bins (default: 3).}

\item{max_bins}{Maximum number of bins (default: 5).}

\item{bin_cutoff}{Minimum frequency to consider a category as a separate bin (default: 0.05).}

\item{max_n_prebins}{Maximum number of pre-bins before merging (default: 20).}

\item{bin_separator}{Separator used when concatenating category names in each bin (default: "\%;\%").}

\item{convergence_threshold}{Threshold for IV convergence (default: 1e-6).}

\item{max_iterations}{Maximum number of iterations for optimization (default: 1000).}
}
\value{
A list containing:
\itemize{
\item bin: String vector with the names of the bins.
\item woe: Numeric vector with WoE values for each bin.
\item iv: Numeric vector with IV values for each bin.
\item count: Integer vector with the total count in each bin.
\item count_pos: Integer vector with the count of positives (target=1) in each bin.
\item count_neg: Integer vector with the count of negatives (target=0) in each bin.
\item converged: Logical value indicating whether the algorithm converged.
\item iterations: Integer value indicating how many iterations were executed.
}
}
\description{
This function performs optimal binning for categorical variables using a Sliding Window Binning (SWB) approach.
The goal is to generate bins with good predictive power (IV) and WoE monotonicity, ensuring stability, robustness,
and maintaining compatibility of input and output names and types. If the categorical variable has only 1 or 2 levels,
no optimization is performed, and only the statistics are calculated and returned.
}
\details{
Steps of the SWB algorithm (refined):
\enumerate{
\item Initialize bins for each category, merging rare categories (below bin_cutoff).
\item If the variable has only 1 or 2 levels, do not optimize, simply calculate WoE/IV and return.
\item Otherwise, order bins by WoE values and merge adjacent bins as needed, respecting min_bins and max_bins.
\item Optimize the number of bins to ensure WoE monotonicity and maximize IV, avoiding issues with few classes.
}

Key formulas:
\deqn{WOE = \ln\left(\frac{P(X|Y=1)}{P(X|Y=0)}\right)}
\deqn{IV = \sum (P(X|Y=1) - P(X|Y=0)) \times WOE}
}
\examples{
\dontrun{
set.seed(123)
target <- sample(0:1, 1000, replace = TRUE)
feature <- sample(LETTERS[1:5], 1000, replace = TRUE)
result <- optimal_binning_categorical_swb(target, feature)
print(result)
}

}
